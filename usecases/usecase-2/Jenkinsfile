// Defining constant global variables
def S3_BUCKET = "s3://dan-usecase1-binaries"
def S3_BINARY_PATH = "devops/app/usecase2"
def S3_TERRAFORM_PATH = "devops/terraform/usecase2"

// Pipeline definition
pipeline {
  agent any
  parameters {
    choice(
      name: 'Deploy_ENV',
      choices: ['BLUE', 'GREEN'],
      description: 'SELECT the production cluster to deploy'
    )
    choice(
      name: 'DESTROY',
      choices: ['NO', 'YES'],
      description: 'SELECT to destroy'
    )
    string(
     name: 'VERSION',
     defaultValue: '1.0.0',
     description: 'Version to deploy on production cluster'
    )
  }
  stages {
  // build stage
    stage('build') {
      when { expression {  params.DESTROY == 'NO' }}
      steps {
        sh 'virtualenv .venv' // Creating the python virtual environment
        // Running python setup tool to create wheel distribution file
        sh """
            source .venv/bin/activate
            pip install -r usecases/usecase-2/requirements.txt
            pip install wheel
            python usecases/usecase-2/setup.py bdist_wheel
           """
      }
    }
  // test stage
    stage('test') {
      when { expression {  params.DESTROY == 'NO' }}
      steps {
        // Running the test suits present in code
        sh """
             source .venv/bin/activate
             python usecases/usecase-2/my_application/test.py
           """
      }
      // Generating test reports
      post {
        always {
          junit 'test-reports/*.xml'
        }
      }
    }
    // Stage to upload binary to s3
    // Deactivating python virtual environment
    stage('uploadBinaryToS3') {
      when { expression {  params.DESTROY == 'NO' }}
      steps {
        sh """
              source .venv/bin/activate
              ls dist/
              aws s3 cp dist/my_application-*.whl ${S3_BUCKET}/${S3_BINARY_PATH}/${params.VERSION}/
              deactivate
           """
      }
    }

    // Destroy Stage for both blue and green
    stage('Destroy-green') {
      when { expression {  (params.Deploy_ENV == 'GREEN') && (params.DESTROY == 'YES') }}
      steps {
        sh """
              aws s3 cp ${S3_BUCKET}/${S3_TERRAFORM_PATH}/green/${params.VERSION}/ . --recursive
              terraform -v
              terraform init
              terraform destroy -auto-approve
           """
      }
    }
    stage('Destroy-blue') {
      when { expression {  (params.Deploy_ENV == 'BLUE') && (params.DESTROY == 'YES') }}
      steps {
        sh """
              aws s3 cp ${S3_BUCKET}/${S3_TERRAFORM_PATH}/blue/${params.VERSION}/ . --recursive
              terraform -v
              terraform init
              terraform destroy -auto-approve
           """
      }
    }

    //Deploy Blue stage
    stage('deploy-blue') {
       // Running terraform scripts and uploading plan file to s3
      // Destroying stack : terraform apply -auto-approve -out planfile
      // view binary files : terraform show -json <FILENAME>
      when { expression {  (params.Deploy_ENV  == 'BLUE') && (params.DESTROY=='NO') }}
      steps {
        sh """
              terraform -v
              cd usecases/usecase-2/terraform/blue/
              terraform init
              terraform plan -out plan.out -var="RELEASE_VERSION=${params.VERSION}"
              terraform apply -auto-approve plan.out
              terraform plan -destroy -out planfile -var="RELEASE_VERSION=${params.VERSION}"
              aws s3 sync . ${S3_BUCKET}/${S3_TERRAFORM_PATH}/blue/${params.VERSION}/ --exclude ".*" --exclude "sample/*"
           """
      }
    } // End stage
    //Deploy Green stage
    stage('deploy-green') {
       // Running terraform scripts and uploading plan file to s3
      when { expression {  (params.Deploy_ENV == 'GREEN') && (params.DESTROY=='NO')  }}
      steps {
        sh """
              terraform -v
              cd usecases/usecase-2/terraform/green/
              terraform init
              terraform plan -out plan.out -var="RELEASE_VERSION=${params.VERSION}"
              terraform apply -auto-approve plan.out
              terraform plan -destroy -out planfile -var="RELEASE_VERSION=${params.VERSION}"
              aws s3 sync . ${S3_BUCKET}/${S3_TERRAFORM_PATH}/green/${params.VERSION}/ --exclude ".*" --exclude "sample/*"
           """
      }
    }
  } // End stages
  // Stage to clean up workspace
  post {
        always {
            cleanWs()
        }
    }
}
